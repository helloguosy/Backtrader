import pandas as pd


# data1 = pd.read_csv('IF888_day.csv', index_col=0, parse_dates=True)
data1 = pd.read_csv('IF888_15min.csv', index_col=0, parse_dates=True)
# data1 = pd.read_csv('IF888_30min.csv', index_col=0, parse_dates=True)

data1 = data1.reindex(columns=['开盘价','最高价','最低价','收盘价','成交量','持仓量'])
data1.columns = ['Open','High','Low','Close','Volume','Openinterest']

data1.head()


from __future__ import (absolute_import, division, print_function,
                        unicode_literals)

from datetime import datetime
import backtrader as bt

# 如果是期货交易
futures_like = True
if futures_like: # 期货交易中佣金、保证金是实数
    commission, margin, mult = 0.0001*data1['Close'][0]*300, data1['Close'][0]*300*0.1, 300
# 非期货交易时
else: # 非期货交易中（股票交易中）佣金是分数（百分比）
    commission, margin, mult = 0.005, None, 1
        
class TestStrategy(bt.Strategy):
    
    params = (
        ('stdgap', 2),
        ('maperiod', 35)
    )
    
    def log(self, txt, dt=None):
        ''' Logging function for this strategy'''
        dt = dt or self.datas[0].datetime.date(0)
        print('%s, %s' % (dt.isoformat(), txt))
        
    def __init__(self):
        self.dataclose = self.datas[0].close
        # 追踪合约
        self.order = None
        self.buyprice = None
        self.buycomm = None
                
        self.boll = bt.indicators.BollingerBands(self.datas[0], period=self.params.maperiod, devfactor=self.params.stdgap)
        
    def notify_order(self, order):
        # 如果有多头合约或者空头合约，则什么都不执行
        if order.status in [order.Submitted, order.Accepted]:
            return
        
        if order.status in [order.Completed]:
            if order.isbuy():
                self.log('BUY EXECUTED, Price: %.2f, Close: %.2f, Commission %.2f' % 
                         (order.executed.price, 
                          order.executed.value,
                          order.executed.comm))
                
                self.buyprice = order.executed.price
                self.buycomm = order.executed.comm
                
            else: # Sell
                self.log('SELL EXECUTE, Price: %.2f, Close: %.2f, Commission %.2f' % 
                         (order.executed.price, 
                          order.executed.value,
                          order.executed.comm))
            
            
        elif order.status in [order.Canceled, order.Margin, order.Rejected]:
            self.log('Order Canceled/Margin/Rejected')
            
        self.order = None
        
    def notify_trade(self, trade):
        if not trade.isclosed:
            return
        
        self.log('OPERATION PROFIT, GROSS %.2f, NET %.2f' % (trade.pnl, trade.pnlcomm))# pnl(PnL):profit and loss
        
    
    def next(self):
        # 打印每日收盘价
        self.log('close, %.2f' % self.dataclose[0])
        
        ### 买入操作
        # 如果有合约在手，则不执行操作
        if self.order:
            return
        
        # 如果没有合约，则执行
        if not self.position:
            if self.dataclose[0] > self.boll.lines.top[0]:
                # 打印买入开仓日志，显示买入价格
                self.log('BUY CREATE, %.2f' % self.dataclose[0])
                self.order = self.buy()
                
            elif self.dataclose[0] < self.boll.lines.bot[0]:
                # 打印卖出开仓日志，显示卖出价格
                self.log('SELL CREATE, %.2f' % self.dataclose[0])
                self.order = self.sell()
                
                
        ### 卖出操作
        else:
            if self.dataclose[0] > self.boll.lines.mid[0] and self.dataclose[-1] < self.boll.lines.mid[-1]:
                # 打印平仓日志，显示平仓价格
                self.log('CLOSE CREATE, %.2f' % self.dataclose[0])
                self.order = self.close()
            
            elif self.dataclose[0] < self.boll.lines.mid[0] and self.dataclose[-1] > self.boll.lines.mid[-1]:
                # 打印平仓日志，显示平仓价格
                self.log('CLOSE CREATE, %.2f' % self.dataclose[0])
                self.order = self.close()
            
        
if __name__ == '__main__':
    cerebro = bt.Cerebro()
    
    cerebro.addstrategy(TestStrategy)

    data = bt.feeds.PandasData(dataname=data1)
    
    cerebro.adddata(data)

    cerebro.broker.setcash(10000000.0)
    # 确定买卖数量，数量为原来的1倍
#     cerebro.addsizer(bt.sizers.FixedSize, stake=1)
    
    cerebro.broker.setcommission(commission=commission, margin=margin, mult=mult)
    
    # 打印初始资金
    print('Starting Portfolio Value: %.2f' % cerebro.broker.getvalue())
    
    cerebro.run()
    
    # 打印最终资金
    print('Final Portfolio Value: %.2f' % cerebro.broker.getvalue())
    
    cerebro.plot()
